#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *head = NULL, *newnode, *temp, *temp1, *temp2;

// Insert at beginning
void InsertAtFirst() {
    newnode = malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);
    newnode->next = head;
    head = newnode;
    printf("%d Inserted at beginning\n", newnode->data);
}

// Insert at end
void InsertAtEnd() {
    newnode = malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;

    if (head == NULL) {
        head = newnode;
    } else {
        temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
    printf("%d Inserted at end\n", newnode->data);
}

// Insert at given position
void InsertAtPosition() {
    int pos, i = 1;
    printf("Enter position: ");
    scanf("%d", &pos);

    newnode = malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    printf("Enter data: ");
    scanf("%d", &newnode->data);

    if (pos == 1) {
        newnode->next = head;
        head = newnode;
        printf("%d Inserted at position %d\n", newnode->data, pos);
        return;
    }

    temp1 = head;
    while (i < pos - 1 && temp1 != NULL) {
        temp1 = temp1->next;
        i++;
    }

    if (temp1 == NULL) {
        printf("Position out of range\n");
        free(newnode);
    } else {
        newnode->next = temp1->next;
        temp1->next = newnode;
        printf("%d Inserted at position %d\n", newnode->data, pos);
    }
}

// Delete from beginning
void DeleteAtFirst() {
    if (head == NULL) {
        printf("List is empty.\n");
    } else {
        temp = head;
        head = head->next;
        printf("Deleted %d from beginning\n", temp->data);
        free(temp);
    }
}

// Delete from end
void DeleteAtEnd() {
    if (head == NULL) {
        printf("List is empty.\n");
    } else if (head->next == NULL) {
        printf("Deleted %d from end\n", head->data);
        free(head);
        head = NULL;
    } else {
        temp1 = head;
        while (temp1->next->next != NULL) {
            temp1 = temp1->next;
        }
        printf("Deleted %d from end\n", temp1->next->data);
        free(temp1->next);
        temp1->next = NULL;
    }
}

// Delete at given position
void DeleteAtPosition() {
    int pos, i = 1;
    printf("Enter position to delete: ");
    scanf("%d", &pos);

    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    if (pos == 1) {
        temp1 = head;
        head = head->next;
        printf("Deleted %d from position 1\n", temp1->data);
        free(temp1);
        return;
    }

    temp1 = head;
    while (i < pos - 1 && temp1->next != NULL) {
        temp1 = temp1->next;
        i++;
    }

    if (temp1->next == NULL) {
        printf("Position out of range.\n");
    } else {
        temp2 = temp1->next;
        temp1->next = temp2->next;
        printf("Deleted %d from position %d\n", temp2->data, pos);
        free(temp2);
    }
}

// Display the list
void display() {
    temp = head;
    if (temp == NULL) {
        printf("List is empty.\n");
    } else {
        printf("List: ");
        while (temp != NULL) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

// Main function
int main() {
    int choice;
    do {
        printf("\n--- Menu ---\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Delete from Beginning\n");
        printf("4. Delete from End\n");
        printf("5. Display\n");
        printf("6. Insert at Position\n");
        printf("7. Delete at Position\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 1) InsertAtFirst();
        else if (choice == 2) InsertAtEnd();
        else if (choice == 3) DeleteAtFirst();
        else if (choice == 4) DeleteAtEnd();
        else if (choice == 5) display();
        else if (choice == 6) InsertAtPosition();
        else if (choice == 7) DeleteAtPosition();
        else if (choice == 8) printf("Exit Successfully...\n");
        else printf("Invalid choice! Try again...\n");

    } while (choice != 8);

    return 0;
}